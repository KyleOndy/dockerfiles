diff -ru 1.4.0p33.cre.orig/lib/python/cmk/store.py 1.4.0p33.cre/lib/python/cmk/store.py
--- 1.4.0p33.cre.orig/lib/python/cmk/store.py	2018-06-09 12:01:46.752027625 +0200
+++ 1.4.0p33.cre/lib/python/cmk/store.py	2018-06-09 12:05:49.233339972 +0200
@@ -257,7 +257,11 @@
 
     # Handle the case where the file has been renamed in the meantime
     while True:
-        fcntl.flock(fd, fcntl.LOCK_EX)
+        try:
+            fcntl.flock(fd, fcntl.LOCK_EX)
+        except IOError as exc:
+            if exc.errno != 9:
+                raise
         fd_new = os.open(path, os.O_RDONLY | os.O_CREAT, 0660)
         if os.path.sameopenfile(fd, fd_new):
             os.close(fd_new)
@@ -276,7 +280,11 @@
 
     for lock_path, fd in g_aquired_locks:
         if lock_path == path:
-            fcntl.flock(fd, fcntl.LOCK_UN)
+            try:
+                fcntl.flock(fd, fcntl.LOCK_UN)
+            except IOError as exc:
+                if exc.errno != 9:
+                    raise
             os.close(fd)
             g_aquired_locks.remove((lock_path, fd))
 
diff -ru 1.4.0p33.cre.orig/share/check_mk/agents/plugins/mk_sap 1.4.0p33.cre/share/check_mk/agents/plugins/mk_sap
--- 1.4.0p33.cre.orig/share/check_mk/agents/plugins/mk_sap	2018-06-09 12:01:47.508031724 +0200
+++ 1.4.0p33.cre/share/check_mk/agents/plugins/mk_sap	2018-06-09 12:08:17.362138847 +0200
@@ -493,7 +493,11 @@
     if state_file_changed:
         new_file = STATE_FILE + '.new'
         fd = os.open(new_file, os.O_WRONLY | os.O_CREAT)
-        fcntl.flock(fd, fcntl.LOCK_EX)
+        try:
+            fcntl.flock(fd, fcntl.LOCK_EX)
+        except IOError as exc:
+            if exc.errno != 9:
+                raise
         os.write(fd, repr(states))
         os.close(fd)
         os.rename(STATE_FILE+'.new', STATE_FILE)
diff -ru 1.4.0p33.cre.orig/share/check_mk/modules/check_mk.py 1.4.0p33.cre/share/check_mk/modules/check_mk.py
--- 1.4.0p33.cre.orig/share/check_mk/modules/check_mk.py	2018-06-09 12:01:47.760033092 +0200
+++ 1.4.0p33.cre/share/check_mk/modules/check_mk.py	2018-06-09 12:06:56.293701583 +0200
@@ -3912,8 +3912,12 @@
             if cmk.debug.enabled():
                 sys.stderr.write("Waiting for exclusive lock on %s.\n" %
                     lock_file)
-            fcntl.flock(restart_lock_fd, fcntl.LOCK_EX |
-                ( restart_locking == "abort" and fcntl.LOCK_NB or 0))
+            try:
+                fcntl.flock(restart_lock_fd, fcntl.LOCK_EX |
+                    ( restart_locking == "abort" and fcntl.LOCK_NB or 0))
+            except IOError as exc:
+                if exc.errno != 9:
+                    raise
         except:
             return True
     return False
diff -ru 1.4.0p33.cre.orig/share/check_mk/web/htdocs/bi.py 1.4.0p33.cre/share/check_mk/web/htdocs/bi.py
--- 1.4.0p33.cre.orig/share/check_mk/web/htdocs/bi.py	2018-06-09 12:01:47.796033287 +0200
+++ 1.4.0p33.cre/share/check_mk/web/htdocs/bi.py	2018-06-09 12:07:36.961920921 +0200
@@ -494,11 +494,12 @@
 
         try:
             fcntl.flock(self._fd, lock_options)
-        except IOError:
-            # This should only happen with LOCK_NB
-            log("Unable to get LOCK")
-            os.close(self._fd)
-            self._fd = None
+        except IOError as exc:
+            if exc.errno != 9:
+                # This should only happen with LOCK_NB
+                log("Unable to get LOCK")
+                os.close(self._fd)
+                self._fd = None
 
         return self
 
@@ -506,7 +507,11 @@
     def __exit__(self, type, value, traceback):
         if self._fd:
             log('BI: BILock %-2s %30s <<<%s>>>' % ( self._fd, "RELEASE", os.path.basename(self._filepath)))
-            fcntl.flock(self._fd, fcntl.LOCK_UN)
+            try:
+                fcntl.flock(self._fd, fcntl.LOCK_UN)
+            except IOError as exc:
+                if exc.errno != 9:
+                    raise
             os.close(self._fd)
             self._fd = None
 
